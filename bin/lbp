#!/usr/bin/sbcl --script
;;; -*- Mode: Lisp; Syntax: COMMON-LISP; Base: 10 -*-

;; arrsim-lbp is a tool to automate package building.
;; Copyright (C) 2012 Russell Sim <russell.sim@gmail.com>
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.


(defparameter *dev-null*
  #-lispm
  (make-two-way-stream (make-concatenated-stream) (make-broadcast-stream))
  ;; Since Lisp Machines have a built-in /dev/null which handles
  ;; additional, non-standard operations, we'll use that instead.
  #+lispm #'system:null-stream)

;;(sb-ext:enable-debugger)
(sb-ext:restrict-compiler-policy 'debug 3)

#-:asdf
(load (merge-pathnames ".quicklisp/asdf.lisp" (user-homedir-pathname)))
#-quicklisp
(let ((*standard-output* *dev-null*)
      (*error-output* *dev-null*))
  (load (merge-pathnames ".quicklisp/asdf.lisp" (user-homedir-pathname)))
  (let ((quicklisp-init (merge-pathnames ".quicklisp/setup.lisp"
                                         (user-homedir-pathname))))
    (when (probe-file quicklisp-init)
      (load quicklisp-init))))

(asdf:initialize-source-registry)

(let ((*standard-output* *dev-null*)
      (*error-output* *dev-null*))
  (eval '(ql:quickload 'unix-options))
  (eval '(ql:quickload 'arrsim-lbp)))


(defmacro printf (control-string &rest format-arguments)
  `(format *standard-output* ,control-string ,@format-arguments))

(defmacro print-error (control-string &rest format-arguments)
  `(format *error-output* ,control-string ,@format-arguments))


(use-package 'arrsim-lbp)
(use-package 'unix-options)

(defun command-push ()
  (with-cli-options ()
    (help)
    (when help
      (print-usage)
      (sb-ext:quit :unix-status 1))
    (push-all)))

(defun command-buildpackage ()
  (with-cli-options ()
    (help)
    (when help
      (print-usage)
      (sb-ext:quit :unix-status 1))
    (buildpackage)))

(defun command-info ()
  (with-cli-options ()
    (help)
    (when help
      (print-usage)
      (sb-ext:quit :unix-status 1))
    (printf "Debian Branch: ~A~%" (car (get-debian)))
    (printf "Upstream Branch: ~A~%" (car (get-upstream)))
    (printf "Current Version ~A~%" (get-current-version))))

(defun command-merge-tag ()
  (with-cli-options ()
    (help recent)
    (when help
      (print-usage)
      (sb-ext:quit :unix-status 1))
    (let ((tag (if recent
                   (git-recent-tag "origin/master")
                   (cadr free)))
          (current-version (get-current-version)))
      (if (and tag
               (compare-versions tag current-version :operator ">"))
          (progn
            (print-error "Merging version ~A.~%" tag)
            (git-merge-tag tag))
          (print-error "Version ~A is older then current deb version ~A.~%" tag current-version)))))

(defun command-merge-branch ()
  (with-cli-options ()
    (help auto)
    (when help
      (print-usage)
      (sb-ext:quit :unix-status 1))
    (let ((branch (cdr free)))
      (let ((debian-version (git-merge-branch branch)))
        (if auto
            (git-commit-version)
            (print-error "Please update debian/changelog.~%"))))))

(defun command-publish ()
  (with-cli-options ()
    (help)
    (when help
      (print-usage)
      (sb-ext:quit :unix-status 1))
    (let ((free (cdr free)))            ; remove the command from the list
      (publish (car free)))))

(defun command-dch ()
  (with-cli-options ()
    (help increment auto)
    (when help
      (print-usage)
      (sb-ext:quit :unix-status 1))
    (increment-revision)
    (if auto
        (git-commit-version)
        (princ "Please update debian/changelog.~%"))))

(let ((primary-command (cadr sb-ext:*posix-argv*)))
  (cond
    ((equal primary-command "push")
     (command-push))
    ((equal primary-command "build")
     (command-buildpackage))
    ((equal primary-command "info")
     (command-info))
    ((equal primary-command "merge-tag")
     (command-merge-tag))
    ((equal primary-command "merge-branch")
     (command-merge-branch))
    ((equal primary-command "publish")
     (command-publish))
    ((equal primary-command "dch")
     (command-dch))
    (t
     (print-error "Invalid Command.~%"))))
